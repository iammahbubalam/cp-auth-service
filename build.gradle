plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco' // For code coverage
}

group = 'com.iammahbubalam'
version = '0.0.1-SNAPSHOT'
description = 'Reactive gRPC Authentication service for Problem Solving Platform'

ext {
    springBootVersion            = '3.5.6'
    grpcSpringBootStarterVersion = '3.1.0.RELEASE'
    protobufVersion              = '3.25.1'
    grpcVersion                  = '1.58.0'
    jjwtVersion                  = '0.11.5'
    auth0JwtVersion              = '4.4.0'
    resilience4jVersion          = '2.1.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    // Core Spring Boot Starters (Reactive + Data)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // gRPC support
    implementation "net.devh:grpc-spring-boot-starter:${grpcSpringBootStarterVersion}"

    // Database & Migration
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Resilience / Circuit Breaking
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}"

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // Additional JWT library (for RS256 and advanced algorithms)
    implementation "com.auth0:java-jwt:${auth0JwtVersion}"

    // ⚠️ Removed Spring Security — Auth implemented manually
    // implementation 'org.springframework.security:spring-security-crypto'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Runtime drivers
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.postgresql:r2dbc-postgresql'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "short"
    }
}

springBoot {
    buildInfo()
}

bootJar {
    // ✅ Fixed layered JAR usage
    layered {
        enabled = true
    }
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.jacocoTestReport {
    dependsOn tasks.test
    reports {
        xml.required = true
        html.required = true
    }
}
